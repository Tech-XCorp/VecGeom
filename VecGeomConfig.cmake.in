# VecGeomConfig.cmake
# -------------------
#
# Config file for the VecGeom package
#
# IMPORTED Targets
# ^^^^^^^^^^^^^^^^
#
# This module defines the following `IMPORTED` targets:
#
# - VecGeom::vecgeom     - Core VecGeom library (static)
# - VecGeom::vgdml       - Present if the GDML parser component was built
# - VecGeom::vecgeomcuda - Present if the CUDA backend was built
#
# Result Variables
# ^^^^^^^^^^^^^^^^
#
# This module defines the following variables either directly, or automatically
# though CMake's find_package command
#
# - VecGeom_FOUND           - True if VecGeom was found
# - VecGeom_BUILTIN_VECCORE - True if VecGeom was built with an internal version on VecCore
# - VecGeom_GDML_FOUND      - True if VecGeom was built with the GDML parser component
# - VecGeom_CUDA_FOUND      - True if VecGeom was built with CUDA support
#
# - VecGeom_scalar_backend_FOUND  - True if the VecGeom backend is scalar
# - VecGeom_vector_backend_FOUND  - True if the VecGeom backend is vector
# - VecGeom_VECTOR_ISA            - String holding the Instruction Set Architecture VecGeom
#                                   was compiled against (e.g. "sse4.2"). The empty string
#                                   if no explicit flag was used.
# - VecGeom_vc_backend_FOUND      - True if the VecGeom vector backend is Vc
#
# Deprecated Variables
# ^^^^^^^^^^^^^^^^^^^^
#
# The following variables are retained for backward compatibility for clients.
# They should no longer be used, and any use migrated to the above IMPORTED targets
# or Result Variables
#
#   VECGEOM_FOUND             - Found the VECGEOM library
#   VECGEOM_INCLUDE_DIRS      - include directories for VecGeom
#   VECGEOM_LIBRARIES         - libraries to link against
#   VECGEOM_DEFINITIONS       - some core flags used to build the vecgeom library and which need to be reused
#                               in projects using VecGeom
#   VECGEOM_INSTALL_DIR       - the top level installation path
#   VECGEOM_EXTERNAL_INCLUDES - external include paths used during vecgeom compilation (for automatic "discovery" of dependencies)
#   VECGEOM_C_COMPILER        - the C compiler used to compile VecGeom
#   VECGEOM_CXX_COMPILER      - the CXX compiler used to compile VecGeom
#

@PACKAGE_INIT@

# Refind required dependencies
include(CMakeFindDependencyMacro)

# Always VecCore
set(VecGeom_BUILTIN_VECCORE @BUILTIN_VECCORE@)
if(VecGeom_BUILTIN_VECCORE)
  # Must find our builtin where we expect
  find_dependency(VecCore @VecCore_VERSION@ NO_DEFAULT_PATH PATHS "@PACKAGE_VECCORE_PREFIX@" COMPONENTS @VecCore_COMPONENTS@ )
else()
  find_dependency(VecCore @VecCore_VERSION@ COMPONENTS @VecCore_COMPONENTS@)
endif()

# Scalar/Vector Backend, Backend Implementation, and ISA
set(VecGeom_scalar_backend_FOUND @VECGEOM_SCALAR@)
set(VecGeom_vc_backend_FOUND @VECGEOM_VC@)

if(VecGeom_vc_FOUND)
  set(VecGeom_vector_backend_FOUND ON)
endif()

# Take default, but clear if it's "empty" as this is an internal "no flag supplied" case
set(VecGeom_VECTOR_ISA "@VECGEOM_VECTOR@")
if(VecGeom_VECTOR_ISA STREQUAL "empty")
  unset(VecGeom_VECTOR_ISA)
endif()

# Optional CUDA (no dependency?)
set(VecGeom_CUDA_FOUND @VECGEOM_ENABLE_CUDA@)
set(VECGEOM_CUDA_ARCH "@CUDA_ARCH@")

# Optional GDML (Xerces-C)
set(VecGeom_GDML_FOUND @GDML@)
if(VecGeom_GDML_FOUND)
  find_dependency(XercesC)
endif()

# To be reviewed - Geant4 may only be for testing/benchmarking
set(VECGEOM_GEANT4 @VECGEOM_GEANT4@)

# Include our target definitions
include("${CMAKE_CURRENT_LIST_DIR}/VecGeomTargets.cmake")

# Older variables/defs
set(VECGEOM_C_COMPILER "@CMAKE_C_COMPILER@")
set(VECGEOM_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(VECGEOM_CXX_FLAGS "${CMAKE_CXX_FLAGS} @VECGEOM_COMPILATION_FLAGS@")
set(VECGEOM_COMPILE_OPTIONS @VECGEOM_COMPILATION_FLAGS@)

get_filename_component(THIS_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
set(VECGEOM_INCLUDE_DIR "@CONF_INCLUDE_DIR@")
set(VECGEOM_EXTERNAL_INCLUDES "@VECGEOM_EXTERNAL_INCLUDES@")
set(VECGEOM_INCLUDE_DIRS ${VECGEOM_INCLUDE_DIR} ${VECGEOM_EXTERNAL_INCLUDES})

set(VECGEOM_LIBRARIES VecGeom::vecgeom)
if(TARGET VecGeom::vecgeomcuda)
  list(APPEND VECGEOM_LIBRARIES VecGeom::vecgeomcuda)
endif()
if(TARGET VecGeom::vecgeomcuda_static)
  set(VECGEOM_CUDA_STATIC_LIBRARY VecGeom::vecgeomcuda_static)
endif()

check_required_components(VecGeom)
