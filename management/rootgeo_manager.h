/**
 * @file root_manager.h
 * @author Johannes de Fine Licht (johannes.definelicht@cern.ch)
 */

#ifndef VECGEOM_MANAGEMENT_ROOTMANAGER_H_
#define VECGEOM_MANAGEMENT_ROOTMANAGER_H_

#include "base/global.h"

#include "base/type_map.h"
#include "TGeoNode.h"


namespace VECGEOM_NAMESPACE {

/**
 * @brief Manager to handle interaction with ROOT geometry.
 * @details Allows integration with ROOT geometries for compatability reasons.
 *          Is not necessary for VecGeom library, and will only have source
 *          compiled if the VECGEOM_ROOT flag is set by the compiler, activated
 *          with -DROOT=ON in CMake.
 */
class RootGeoManager {

private:

  /** Remember pointer to generated world from imported ROOT geometry. */
  VPlacedVolume const* world_;

  TypeMap<VPlacedVolume*, TGeoNode const*> placed_volumes_;
  TypeMap<VUnplacedVolume*, TGeoShape const*> unplaced_volumes_;
  TypeMap<LogicalVolume*, TGeoVolume const*> logical_volumes_;
  TypeMap<TransformationMatrix*, TGeoMatrix const*> matrices_;

public:

  /** Access singleton instance. */
  static RootGeoManager& Instance() {
    static RootGeoManager instance;
    return instance;
  }

  /**
   * @return Most recently generated world from ROOT geometry. Will return NULL
   *         if no ROOT geometry has been imported.
   * @sa LoadRootGeometry()
   */
  VPlacedVolume const* world() const { return world_; }

  TGeoNode const * tgeonode( VPlacedVolume const * p ) const
  { return placed_volumes_[const_cast<VPlacedVolume*>(p)]; }

  /**
   * Get placed volume that corresponds to a TGeoNode
   */
  VPlacedVolume const * GetPlacedVolume( TGeoNode const * n ) const {
	  return placed_volumes_[n];
  }

  char const *  GetName( VPlacedVolume const * p  ) const { return tgeonode(p)->GetName(); }
  void PrintNodeTable() const;

  /**
   * Queries the global ROOT GeoManager for the top volume and recursively
   * imports and converts to VecGeom geometry.
   * Will register the imported ROOT geometry as the new world of the VecGeom
   * GeoManager singleton.
   */
  void LoadRootGeometry();

  /**
   * @brief Deletes all VecGeom geometry generated by this class.
   */
  void Clear();

  /**
   * Converts a TGeoNode to a VPlacedVolume, recursively converting daughters.
   * Will take care not to convert anything twice by checking the birectional
   * map between ROOT and VecGeom geometry.
   */
  VPlacedVolume* Convert(TGeoNode const *const node);

  VUnplacedVolume* Convert(TGeoShape const *const shape);

  LogicalVolume* Convert(TGeoVolume const *const volume);

  UnplacedBox* Convert(TGeoBBox const *const box);

  TransformationMatrix* Convert(TGeoMatrix const *const matrix);

private:

  RootGeoManager() : world_(NULL) {}
  RootGeoManager(RootGeoManager const&);
  RootGeoManager& operator=(RootGeoManager const&);

};

} // End global namespace

#endif // VECGEOM_MANAGEMENT_ROOTMANAGER_H_
