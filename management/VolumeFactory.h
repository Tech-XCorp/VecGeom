/// \file VolumeFactory.h
/// \author Johannes de Fine Licht (johannes.definelicht@cern.ch)

#ifndef VECGEOM_MANAGEMENT_VOLUMEFACTORY_H_
#define VECGEOM_MANAGEMENT_VOLUMEFACTORY_H_

#include "volumes/PlacedVolume.h"
#include "base/Transformation3D.h"
#include "volumes/LogicalVolume.h"

namespace vecgeom {
inline namespace VECGEOM_IMPL_NAMESPACE {

class VolumeFactory {

public:
  static VolumeFactory &Instance()
  {
    static VolumeFactory instance;
    return instance;
  }

#ifndef VECCORE_CUDA

  template <typename VolumeType>
  static VPlacedVolume *CreateByTransformation(LogicalVolume const *const logical_volume,
                                               Transformation3D const *const transformation,
                                               const TranslationCode trans_code, const RotationCode rot_code,
                                               VPlacedVolume *const placement = NULL);

#else

  template <typename VolumeType>
  VECCORE_ATT_DEVICE
  static VPlacedVolume *CreateByTransformation(LogicalVolume const *const logical_volume,
                                               Transformation3D const *const transformation,
                                               const TranslationCode trans_code, const RotationCode rot_code,
                                               const int id, VPlacedVolume *const placement = NULL);

#endif

private:
  VolumeFactory() {}
  VolumeFactory(VolumeFactory const &);
  VolumeFactory &operator=(VolumeFactory const &);
};

template <typename VolumeType>
#ifdef VECCORE_CUDA
__device__
#endif
    VPlacedVolume *
    VolumeFactory::CreateByTransformation(LogicalVolume const *const logical_volume,
                                          Transformation3D const *const transformation,
                                          const TranslationCode trans_code, const RotationCode rot_code,
#ifdef VECCORE_CUDA
                                          const int id,
#endif
                                          VPlacedVolume *const placement)
{

  (void)trans_code;
  (void)rot_code;

// Specialization on translation and rotation.
// Script generated by ../scripts/generate_specializations.py
#include "TransformationSpecializations.icc"
}
}
} // End global namespace

#endif // VECGEOM_MANAGEMENT_VOLUMEFACTORY_H_
